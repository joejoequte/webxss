name: Rad & Dalfox 扫描

# 手动触发工作流，用户需要输入目标域名
on:
  workflow_dispatch:
    inputs:
      target_domain:
        description: '要扫描的域名'
        required: true
        default: 'example.com'

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
    # 步骤1：设置缓存以提高工作流效率
    - name: 设置缓存以提高工作流效率
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/go/bin
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # 步骤2：检出仓库代码
    - name: 检出仓库代码
      uses: actions/checkout@v3

    # 步骤3：安装最新的 Go 环境
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'  # 使用最新版本的 Go

    # 步骤4：克隆 Rad 仓库并初始化 Go 模块
    - name: 克隆 Rad 仓库并初始化 Go 模块
      run: |
        git clone https://github.com/chaitin/rad.git
        cd rad
        go mod init rad  # 初始化 Go 模块
        go mod tidy      # 整理模块依赖

    # 步骤5：运行 Rad 扫描并将结果保存为文件
    - name: 运行 Rad 扫描
      run: |
        cd rad
        ./rad -t ${{ github.event.inputs.target_domain }} -o ../rad_output.txt  # 将输出结果保存到项目根目录的 rad_output.txt 文件中
    
    # 步骤6：安装 Dalfox 工具
    - name: 安装 Dalfox
      run: |
        go install github.com/hahwul/dalfox/v2@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH

    # 步骤7：使用 Dalfox 扫描 Rad 的输出结果，并生成报告
    - name: 使用 Dalfox 扫描
      run: |
        # 使用 Dalfox 扫描 rad_output.txt 中的所有 URL，并生成详细的 JSON 格式报告
        dalfox file rad_output.txt --output dalfox_results.json --format json --report --report-format=json

    # 步骤8：将扫描结果作为输出工件（Artifacts）导出
    - name: 导出扫描结果
      uses: actions/upload-artifact@v3
      with:
        name: dalfox-scan-results
        path: dalfox_results.json
